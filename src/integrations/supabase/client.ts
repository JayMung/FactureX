// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { getCSRFHeaders } from '@/lib/security/headers';
import { handleSupabaseError } from '@/lib/security/error-handling';
import { validateSupabaseRequest, validateUserSession } from '@/lib/security/validation';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables. Please check your .env file.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // Enhanced security with PKCE flow
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    // Additional security settings
    debug: import.meta.env.DEV,
  },
  global: {
    headers: {
      // Add custom headers for CSRF protection
      ...getCSRFHeaders(),
      // Additional security headers
      'X-Content-Type-Options': 'nosniff',
      'X-Frame-Options': 'DENY',
    },
  },
  db: {
    schema: 'public',
  },
  // Realtime security
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Enhanced error handling wrapper
export const secureSupabase = {
  ...supabase,
  
  // Override from method to add security validation
  from: (table: string) => {
    const originalFrom = supabase.from(table);
    
    return {
      ...originalFrom,
      
      // Override select method for security
      select: (columns?: string, options?: { count?: 'exact' | 'planned' | 'estimated' }) => {
        const query = originalFrom.select(columns, options);
        
        return {
          ...query,
          
          // Override then method for error handling
          then: (onFulfilled?: any, onRejected?: any) => {
            return query.then(
              (result) => {
                // Validate result for security
                if (result.error) {
                  const securityError = handleSupabaseError(result.error, { 
                    operation: 'select', 
                    table,
                    columns 
                  });
                  return { ...result, error: securityError };
                }
                return result;
              },
              (error) => {
                const securityError = handleSupabaseError(error, { 
                  operation: 'select', 
                  table 
                });
                throw securityError;
              }
            );
          }
        };
      }
    };
  }
};

// Security validation helpers
export const validateSupabaseConnection = async (): Promise<boolean> => {
  try {
    // Test basic connection
    const { error } = await supabase.from('settings').select('count').limit(1);
    
    if (error) {
      handleSupabaseError(error, { operation: 'connection_test' });
      return false;
    }
    
    return true;
  } catch (error) {
    handleSupabaseError(error, { operation: 'connection_test' });
    return false;
  }
};

// Export the secure supabase client as the default
export { secureSupabase as default };